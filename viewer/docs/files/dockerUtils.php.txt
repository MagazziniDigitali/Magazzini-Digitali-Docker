<?php
/**
 * dockerUtils file, name is self-explaining.
 *
 * This file contains function and constants needed to interact with Docker daemon
 * as well as some utils functions which are needed to manage containers
 *
 * @author svalo@libersoft.it
 * @copyright ???
 * @license   ???
 * @package VisualizzatoreRemoto\dockerUtils
 *
 */


require 'vendor/autoload.php';

use Docker\Docker;
use Docker\DockerClient;
use Docker\API\Model\ContainerConfig;
use Docker\API\Model\HostConfig;

/** Should be the address of the Docker host */
define( "DOCKER_HOST",      "192.168.7.5");
/** Should be the maximum number of containers*/
define( "MAX_CONTAINER",    "250");
/** Should be the first available port where VNC will connect to */
define( "FIRS_PORT",        "5900");
/** Should be the base Firefox URL if undefined. */
define( "FIREFOXURL",       "http://md-www.test.bncf.lan/index.php/opac/");
/** Should be the address the Docker daemon is listening to, API version is present to ensure compatibility */
define( "REMOTE_SOCKET",    "tcp://127.0.0.1:2375/v1.24");
/** Should be the leght of the ticket string */
define( "TICKET_LEN",       36);

/**
 * Exception is thrown if something goes wrong with one of the utils.
 *
 */
class dockerUtilsException extends Exception {

}

/**
 * Exception is thrown if parameter parsing goes wrong.
 *
 */
class getParameterException extends Exception {

}


//Initializes Docker object and instantiate a container manager

$client = new DockerClient([
    'remote_socket' => REMOTE_SOCKET,
    'ssl' => false,
]);
$docker = new Docker($client);

//TODO:Check if docker is started
try {
    $containerManager = $docker->getContainerManager();
} catch (\Exception $e) {
	error_log( $e->getMessage() );
}

/**
 * Generates a container configuration with a base set of properties.
 *
 * @param string $ffurl URL to point container's browser to
 * @param string $port Port to be used by NoVnc
 * @param string $image Image to be used to create container
 *
 * @return \Docker\API\Model\ContainerConfig A containerConfig class with paremeters set.
 *
 */
function genContainerConfig ($ffurl=FIREFOXURL,
    $port="5900", $image="local/ffviewer:standard") {

    //Define manager and components to set properties
    $containerConfig = new ContainerConfig();
    $containerHostConfig = new HostConfig();

    //Defines host settings
    $containerHostConfig->setMemory(360000000);
    $containerHostConfig->setPortBindings(["5900/tcp" => [["HostPort" => $port]]]);
    $containerHostConfig->setPublishAllPorts(False);
    $containerHostConfig->setPrivileged(False);
    $containerHostConfig->setCapAdd("NET_ADMIN");
    $containerHostConfig->setCapDrop("MKNOD");
    $containerHostConfig->setNetworkMode("bridge");

    //Defines general container settings
    $containerConfig->setAttachStdin(False);
    $containerConfig->setAttachStdout(False);
    $containerConfig->setAttachStderr(False);
    $containerConfig->setTty(False);
    $containerConfig->setOpenStdin(False);
    $containerConfig->setStdinOnce(False);
    $containerConfig->setImage($image);
    $containerConfig->setNetworkDisabled(False);
    $containerConfig->setExposedPorts(['5900/tcp' => [''=>'']]);
    $containerConfig->setEnv(["FFURL=$ffurl"]);
    $containerConfig->setCmd(
                        ["/usr/bin/x11vnc",
                        "-input",
                        "MBK,MBK",
                        "-timeout",
                        "5",
                        "-nopw",
                        "-create",
                        "-gone",
                        "touch /root/left.txt",
                        "-env",
                        "FD_PROG=/usr/bin/viewer.sh"]
                         );
    $containerConfig->setHostConfig($containerHostConfig);

    return $containerConfig;
}

/**
 * Create a container with firefox url and port set.
 *
 * @param \Docker\Manager\ContainerManager $containerManager the containerManager we are using
 * @param string $port To be used by NoVnc
 * @param string $ffurl URL to point container's browser to
 * @param string $image Image to be used to create container
 *
 * @return string The id of the created continer
 *
 * @throws dockerUtilsException "Failed to create container: returncode" if the warning message is not Null
 *
 */
function createContainer($containerManager, $port, $ffurl=FIREFOXURL, $image){

    $contConfig = genContainerConfig($ffurl, $port, $image);

    $containerCreateResult = $containerManager->create($contConfig);

    if ( $containerCreateResult->getWarnings() == Null ) {
        return $containerCreateResult->getId();
    } else {
        throw new dockerUtilsException( 'Failed to create container: '.$containerCreateResult);
    }

};

/**
 * Start the container passed as ID.
 *
 * @param \Docker\Manager\ContainerManager $containerManager The containerManager we are using
 * @param string $id The id of the container that should be started
 *
 * @return true If the container was started succesfuly
 *
 * @throws dockerUtilsException "Container already started" if getStatusCode is 304
 * @throws dockerUtilsException "Container does not exist" if getStatusCode is 404
 * @throws dockerUtilsException "Generic server error" if getStatusCode is 504
 * @throws dockerUtilsException "Invalid response from Docker" if anything else
 *
 */
function startContainer($containerManager, $id){
    $containerStartResult = $containerManager->start($id);
    $isStarted = $containerStartResult->getStatusCode();
    switch ($isStarted) {
        case 204:
            return TRUE;
        case 304:
            throw new dockerUtilsException ('Container already started');
        case 404:
            throw new dockerUtilsException ('Container does not exist');
        case 500:
            throw new dockerUtilsException ('Generic server error');
        default:
            throw new dockerUtilsException ('Invalid response from Docker');
    }
}
/**
 * Returns the firs available port starting from FIRS_PORT.
 *
 * @return int Returns the firs available port starting from FIRS_PORT
 *
 * @throws dockerUtilsException "No available port left" if no available port left
 *
 */
function portCheck(){

    $host = DOCKER_HOST;
    $port = FIRS_PORT;
    $max_container = MAX_CONTAINER;
    $open = true;
    $max_port = $port+$max_container;
    while ( ($port < $max_port) && $open ) {
        $test = @fsockopen( $host, $port, $timeout = 3 );
        if ( !$test ){
            $open = false;
        }
        else{
            fclose( $test );
            $open = true;
            $port += 1;
        }
    }
    if ( $open ){
        throw new dockerUtilsException('No available port left');
    }
    else{
        return $port;
    }
}

/**
 * Returns right container image for required type, exception raised if wrong or unset.
 *
 * @param string $type The desired image type
 * @param array $imagesAvailable The array containing the supported images
 *
 * @return string The image needed for the requested type
 *
 * @throws getParameterException "Requested content type is unsupported or unset" if the type is not supported or it wasn't set
 *
 */
function getRequestedContainerType ($type , $imagesAvailable ) {
    if ( (! isset( $type )) or (! in_array($type, array_keys($imagesAvailable) ) ) ){
        throw new getParameterException('Requested content type is unsupported or unset');
    }
    return $imagesAvailable["$type"];
}

/**
 * Returns ticket string from client call, exception raised if wrong or unset.
 *
 * @param string $ticket The ticket comunicated by the client
 *
 * @return string Returns The ticket once verified it's of the correct lenght
 *
 * @throws getParameterException If Supplied ticket is different from what we expect
 *
 */
function getRequestedTicket ($ticket) {
    if ( TICKET_LEN == mb_strlen($ticket)) {
        return $ticket;
    } else {
        throw new getParameterException('Supplied ticket is in an unknown format');
    }
}
?>

